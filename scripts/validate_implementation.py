#!/usr/bin/env python3
"""Validation script for Application Layer implementation."""

import sys
import os
import importlib.util
from pathlib import Path

def check_file_exists(file_path: str) -> bool:
    """Check if a file exists."""
    path = Path(file_path)
    return path.exists() and path.is_file()

def check_import(module_path: str, class_name: str = None) -> bool:
    """Check if a module/class can be imported."""
    try:
        # Convert file path to module path
        if module_path.endswith('.py'):
            module_path = module_path[:-3]
        module_path = module_path.replace('/', '.').replace('\\', '.')
        
        # Remove src. prefix if present
        if module_path.startswith('src.'):
            module_path = module_path[4:]
        
        module = importlib.import_module(module_path)
        
        if class_name:
            return hasattr(module, class_name)
        return True
    except Exception as e:
        print(f"Import error for {module_path}: {e}")
        return False

def main():
    """Main validation function."""
    print("üîç Validating Application Layer Implementation...")
    print("=" * 60)
    
    # Set up Python path
    project_root = Path(__file__).parent
    src_path = project_root / "src"
    if str(src_path) not in sys.path:
        sys.path.insert(0, str(src_path))
    
    # Files to check
    implementation_files = [
        # Core interfaces
        "src/application/interfaces/unit_of_work.py",
        "src/application/interfaces/domain_event_publisher.py",
        
        # DTOs
        "src/application/dto/test_configuration_dto.py",
        
        # Services
        "src/application/services/model_provider_service.py", 
        "src/application/services/test_validation_service.py",
        "src/application/services/test_orchestration_service.py",
        
        # Use Cases
        "src/application/use_cases/test_management/create_test.py",
        "src/application/use_cases/test_management/start_test.py",
        "src/application/use_cases/test_management/monitor_test.py",
        "src/application/use_cases/test_management/complete_test.py",
        "src/application/use_cases/test_management/validate_configuration.py",
        "src/application/use_cases/test_management/update_configuration.py",
        "src/application/use_cases/test_management/add_samples.py",
        "src/application/use_cases/test_management/process_samples.py",
        
        # Tests
        "tests/integration/application/use_cases/test_management/test_create_test_use_case.py",
        "tests/integration/application/use_cases/test_management/test_orchestration_service.py",
        "tests/integration/application/use_cases/test_management/test_complete_workflow.py"
    ]
    
    # Check file existence
    print("üìÅ Checking file existence...")
    all_files_exist = True
    for file_path in implementation_files:
        exists = check_file_exists(file_path)
        status = "‚úÖ" if exists else "‚ùå"
        print(f"{status} {file_path}")
        all_files_exist = all_files_exist and exists
    
    print("\nüîß Checking core class imports...")
    
    # Core classes to validate
    import_checks = [
        ("application.interfaces.unit_of_work", "UnitOfWork"),
        ("application.interfaces.domain_event_publisher", "DomainEventPublisher"),
        ("application.dto.test_configuration_dto", "CreateTestCommandDTO"),
        ("application.dto.test_configuration_dto", "TestConfigurationDTO"),
        ("application.services.model_provider_service", "ModelProviderService"),
        ("application.services.test_validation_service", "TestValidationService"),
        ("application.services.test_orchestration_service", "TestOrchestrationService"),
        ("application.use_cases.test_management.create_test", "CreateTestUseCase"),
        ("application.use_cases.test_management.start_test", "StartTestUseCase"),
        ("application.use_cases.test_management.monitor_test", "MonitorTestUseCase"),
        ("application.use_cases.test_management.complete_test", "CompleteTestUseCase"),
    ]
    
    all_imports_work = True
    for module_path, class_name in import_checks:
        import_works = check_import(module_path, class_name)
        status = "‚úÖ" if import_works else "‚ùå"
        print(f"{status} {module_path}.{class_name}")
        all_imports_work = all_imports_work and import_works
    
    print("\nüìä Validation Summary")
    print("=" * 60)
    
    file_status = "‚úÖ PASS" if all_files_exist else "‚ùå FAIL"
    import_status = "‚úÖ PASS" if all_imports_work else "‚ùå FAIL"
    overall_status = "‚úÖ SUCCESS" if all_files_exist and all_imports_work else "‚ùå FAILURE"
    
    print(f"File Existence:     {file_status}")
    print(f"Import Validation:  {import_status}")
    print(f"Overall Status:     {overall_status}")
    
    if all_files_exist and all_imports_work:
        print("\nüéâ Application Layer Implementation Complete!")
        print("\nKey Features Implemented:")
        print("‚Ä¢ Core Test Lifecycle Use Cases (Create, Start, Monitor, Complete)")
        print("‚Ä¢ Test Configuration Management with Validation")
        print("‚Ä¢ Sample Management and Processing with Batch Support")
        print("‚Ä¢ Comprehensive Error Handling and Transaction Management")
        print("‚Ä¢ Event-Driven Architecture with Domain Events")
        print("‚Ä¢ Cross-Domain Integration (Test Management, Model Provider, Evaluation, Analytics)")
        print("‚Ä¢ Orchestration Service for Complex Workflows")
        print("‚Ä¢ Comprehensive Integration Test Suite")
        
        print("\nArchitecture Highlights:")
        print("‚Ä¢ Clean Architecture with CQRS Pattern")
        print("‚Ä¢ Unit of Work Pattern for Transaction Management")
        print("‚Ä¢ Domain Event Publishing for Decoupled Communication")
        print("‚Ä¢ DTO Pattern for Clean Data Transfer")
        print("‚Ä¢ Service Layer for Business Logic Orchestration")
        print("‚Ä¢ Comprehensive Error Handling and Recovery")
        
        return 0
    else:
        print("\n‚ùå Implementation validation failed!")
        return 1

if __name__ == "__main__":
    sys.exit(main())