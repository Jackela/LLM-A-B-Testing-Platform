version: '3.8'

services:
  postgres-test:
    image: postgres:15-alpine
    container_name: llm-ab-test-postgres-test
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB:-test_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    tmpfs:
      - /tmp
      - /var/run/postgresql
    shm_size: 128mb
    command: >
      postgres
      -c shared_buffers=128MB
      -c max_connections=100
      -c log_statement=all
      -c log_min_duration_statement=0
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on

  redis-test:
    image: redis:7-alpine
    container_name: llm-ab-test-redis-test
    ports:
      - "6380:6379"
    volumes:
      - redis_test_data:/data
      - ./configs/redis-test.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    tmpfs:
      - /tmp

  # Test database with pre-loaded test data
  postgres-test-seeded:
    image: postgres:15-alpine
    container_name: llm-ab-test-postgres-seeded
    environment:
      POSTGRES_DB: ${POSTGRES_SEEDED_DB:-test_seeded_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5434:5432"
    volumes:
      - postgres_seeded_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./scripts/seed-test-data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d test_seeded_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    profiles:
      - seeded

  # MinIO for testing file storage (if needed)
  minio-test:
    image: minio/minio:latest
    container_name: llm-ab-test-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    ports:
      - "9001:9000"
      - "9002:9001"
    volumes:
      - minio_test_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    profiles:
      - storage

  # Elasticsearch for testing search functionality (if needed)
  elasticsearch-test:
    image: elasticsearch:8.11.0
    container_name: llm-ab-test-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_test_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - search

  # Test API service for integration testing
  api-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: llm-ab-test-api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres-test:5432/${POSTGRES_TEST_DB:-test_db}
      - REDIS_URL=redis://redis-test:6379/0
      - TESTING=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn src.presentation.api.app:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    profiles:
      - api

  # Load testing service
  load-test:
    image: locustio/locust:latest
    container_name: llm-ab-test-locust
    ports:
      - "8090:8089"
    volumes:
      - ./tests/performance/locustfiles:/mnt/locust
    command: -f /mnt/locust/api_load_test.py --host=http://api-test:8000
    depends_on:
      api-test:
        condition: service_healthy
    profiles:
      - load-test

  # Test results collector
  test-results:
    image: alpine:latest
    container_name: llm-ab-test-results
    volumes:
      - test_results:/results
      - ./scripts/collect-test-results.sh:/collect-results.sh
    command: sh /collect-results.sh
    profiles:
      - results

volumes:
  postgres_test_data:
    driver: local
  postgres_seeded_data:
    driver: local
  redis_test_data:
    driver: local
  minio_test_data:
    driver: local
  elasticsearch_test_data:
    driver: local
  test_results:
    driver: local

networks:
  default:
    name: llm-ab-test-network
    driver: bridge